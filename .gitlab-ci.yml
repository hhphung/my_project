# Example  .gitlab-ci.yml file
stages:
  - mavenbuild
  - maventest
  - androidbuild
  - androidtest
  - mavendeploy

maven-build:   #this is a JOB
  stage: mavenbuild
  tags:
    - springboot_tag  # this is LINK to the shell runner on the remote-server 
  script:
    - cd Backend/MeetMe
    - mvn package -B

maven-test:
  stage: maventest
  tags:
    - springboot_tag
  script:
    - cd Backend/MeetMe
    - mvn test
  artifacts:
    paths:
      - Backend/MeetMe/target/*.jar

android-build:
  image: javiersantos/android-ci:latest      # this is a directive to DOCKER
  stage: androidbuild
  tags:
   - android_tag         #this is LINK to the docker runner on the remote-server        
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x ./Frontend/gradlew
  script:
    - cd Frontend
    - ./gradlew build
  artifacts:
    paths:
      - Android_test/app/build/outputs/


android-test:
  image: javiersantos/android-ci:latest      # this is a directive to DOCKER
  stage: androidtest
  tags:
   - android_tag    
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - chmod +x ./Frontend/gradlew
  script:
    - cd Frontend
    - ./gradlew build 

# Below job builds, deploys, executes jar as service.
auto-deploy:
  stage: mavendeploy  #do make a stage with same name!
  tags:
   - springboot_tag
  script:
    - cd Backend/MeetMe
    - mvn package
    - sudo mv target/*.jar /target/web-demo.jar 
    - sudo systemctl stop system-web-demo
    - sudo systemctl start system-web-demo
